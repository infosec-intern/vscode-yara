{
    "Import": {
        "prefix": "import",
        "body": "import \"${1|pe,elf,cuckoo,magic,hash,math,dotnet,time,console,vt|}\"",
        "description": "Import a YARA module"
    },
    "Include": {
        "prefix": "include",
        "body": "include \"external_rules.yara\"",
        "description": "Include an external YARA file"
    },
    "for..of": {
        "prefix": "for_of",
        "body": [
            "for ${1:any} of ${2:them} : (",
             "\t${3:boolean_expression}",
             ")"
        ],
        "description": "Apply the same condition to many strings"
    },
    "for..in": {
        "prefix": "for_in",
        "body": [
            "for ${1:any i} in ( ${2:them} ) : (",
            "\t${3:boolean_expression}",
            ")"
        ],
        "description": "Loop over items"
    },
    "any": {
        "prefix": "any",
        "body": "any of ${them}",
        "description": "String set keyword: any"
    },
    "all": {
        "prefix": "all",
        "body": "all of ${them}",
        "description": "String set keyword: all"
    },
    "PE Header": {
        "prefix": "header_pe",
        "body": "uint16(0) == 0x5A4D ",
        "description": "Generate a condition to check for a PE file header"
    },
    "ELF Header": {
        "prefix": "header_elf",
        "body": "uint32(0) == 0x464C457F ",
        "description": "Generate a condition to check for an ELF file header"
    },
    "Mach-O Header": {
        "prefix": "header_macho",
        "body": "(uint16(0) == 0xfeca or uint16(0) == 0xfacf) ",
        "description": "Generate a condition to check for a Mach-O file header"
    },
    "LNK Header": {
        "prefix": "header_LNK",
        "body": "uint16(0) == 0x004c and uint32(4) == 0x00021401 ",
        "description": "Generate a condition to check for a LNK file header"
    },
    "Doc Header": {
        "prefix": "header_Doc",
        "body": [
            "\t\tuint32be(0) == 0x09081000 or // XLS",
             "\t\t// uint32be(0) == 0x25504446 or // PDF",
             "\t\t// DOCX, XLSX, PPTX - Microsoft Office Open XML Format (OOXML)",
             "\t\t( uint32be(0) == 0x504b0304 and \\$s1 in (0..100) ) or",
             "\t\tuint32be(0) == 0x7b5c7274 or // RTF",
             "\t\t// DOC, DOT, PPS, PPT, XLA, XLS, WIZ",
             "\t\t( uint32be(0) == 0xd0cf11e0 and not \\$r1 ) or",
             "\t\tuint32be(512) == 0xeca5c100 or // DOC",
             "\t\tuint32be(512) == 0xa0461df0 or // PPT",
             "\t\tuint32be(512) == 0x0f00e803    // PPT"
            ],
        "description": "Generate a condition to check for a Doc file header"
    },
    "PDF Header": {
        "prefix": "header_PDF",
        "body": "uint32(0) == 0x46445025 ",
        "description": "Generate a condition to check for a PDF file header"
    },
    "RTF Header": {
        "prefix": "header_RTF",
        "body": "uint32be(0) == 0x7B5C7274 ",
        "description": "Generate a condition to check for a RTF file header"
    },
    "gzip Header": {
        "prefix": "header_gzip",
        "body": "uint16(0) == 0x8B1F ",
        "description": "Generate a condition to check for a gzip file header"
    },
    "pkzip Header": {
        "prefix": "header_pkzip",
        "body": "uint16(0) == 0x4b50 ",
        "description": "Generate a condition to check for a pkzip file header"
    },  
    "string": {
        "prefix": "$s",
        "body": [
            "\\$s = \"${CLIPBOARD/([\\\"\\\\])/\\$1/g}\" ${1|ascii,wide|} ${2:fullword}"
        ],
        "description": "Generate a string with the escaped content of your clipboard"
    },
    "regex": {
        "prefix": "$re",
        "body": [
            "\\$re = /${CLIPBOARD/([\\\\\/\\\\^\\\\$\\|(){}\\[\\]*+?\\\\.])|(\\n)|(\\t)|(\\r)/${1:+\\\\}${1}${2:+\\\\n}${3:+\\\\t}${4:+\\\\r}/g}/"
        ],
        "description": "Generate a regex string with the escaped content of your clipboard"
    },
    "pasteString": {
        "prefix": "pasteString",
        "body": [
            "${CLIPBOARD/([\\\"\\\\])/\\$1/g}"
            ],
            "description": "Paste current clipboard escaped for yara strings"
        },
    "pasteRegex": {
        "prefix": "pasteRegex",
        "body": [
            "${CLIPBOARD/([\\\\\/\\\\^\\\\$\\|(){}\\[\\]*+?\\\\.])|(\\n)|(\\t)|(\\r)/${1:+\\\\}${1}${2:+\\\\n}${3:+\\\\t}${4:+\\\\r}/g}"
        ],
        "description": "Paste current clipboard escaped for yara regex"
    },
    "hex": {
        "prefix": "$c",
        "body": [
            "\\$c ={${CLIPBOARD/[\t]*(.+?)\\n/${1}\n\t\t\t  /g}}"
        ],
        "description": "Generate a hex-string with the content of your clipboard"
    }
}
